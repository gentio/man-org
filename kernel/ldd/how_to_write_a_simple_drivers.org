* The linux kernle driver program is easy.
The code of linux kernel driver is easy to write. Although it was said that it is geek, it is eaiser than the app program.

The API of linux driver is stable. It differs from the api of the app, such as ruby app or python.

* How to write a linux driver ?
There are some template to wite a driver.
#+begin_src
#include <linux/init.h>
#include <linux/module.h>

static ssize_t xxx_read(struct file *file,
                        const char *buffer, size_t length,
                        loff_t *offset)
{
  /*   something */
}
static ssize_t xxx_write(struct file *file,
                        const char *buffer, size_t length,
                        loff_t *offset)
{
  /*   something */
}
/ * to make the kernel know the method while the event happan */
struct file_operations dummy_ops = {
       .owner = THIS_MODULE, /* UNUSUALLY */
       .open  = xxx_open;
       .release = xxx_release;
       .read    = xxx_read;
       .write   = xxx_write;
};
int __init xxx_init(void) /* the init function. */
{
}
void __exit xxx_exit(void) /* the exit function */
{
}
module_init(xxx_init);
module_exit(xxx_exit);
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Gentio");
#+end_src
** This is a dummy driver from the book  Master the embedded linux program.
#+begin_src
#include <linux/kernel.h>
#include <linux/module.h>
#include <linux/init.h>
#include <linux/fs.h>
#include <linux/device.h>
#define DEVICE_NAME "dummy"
#define MAJOR_NUM 42
#define NUM_DEVICES 4

static struct class *dummy_class;
static int dummy_open(struct inode *inode, struct file *file)
{
    pr_info("%s\n", __func__);
    return 0;
}

static int dummy_release(struct inode *inode, struct file *file)
{
    pr_info("%s\n", __func__);
    return 0;
}
static ssize_t dummy_read(struct file *file,
                          char *buffer, size_t length,
                          loff_t *offset)
{
    pr_info("%s %u\n", __func__, length);
    return 0;
}
static ssize_t dummy_write(struct file *file,
                          const char *buffer, size_t length,
                          loff_t *offset)
{
    pr_info("%s %u\n", __func__, length);
    return 0;
}
struct file_operations dummy_fops = {
    .owner  = THIS_MODULE,
    .open   = dummy_open,
    .release = dummy_release,
    .read   = dummy_read,
    .write  = dummy_write,
};

int __init dummy_init(void)
{
    int ret;
    int i;
    printk("Dummy  loaded\n");
    ret = register_chrdev(MAJOR_NUM, DEVICE_NAME, &dummy_fops);
    if (ret != 0)
        return ret;
    dummy_class = class_create(THIS_MODULE, DEVICE_NAME);
    for (i = 0; i < NUM_DEVICES; i++) {
        device_create(dummy_class, NULL, MKDEV(MAJOR_NUM, i), NULL, "dummy%d",  i);
    }
    return 0;
}
void __exit dummy_exit(void)
{
    int i;
    for (i = 0; i < NUM_DEVICES; i++) {
        device_destroy(dummy_class, MKDEV(MAJOR_NUM, i));
    }
    class_destroy(dummy_class);
    unregister_chrdev(MAJOR_NUM, DEVICE_NAME);
    printk("Dummy  unloaded\n");
}

module_init(dummy_init);
module_exit(dummy_exit);
MODULE_LICENSE("GPL");
MODULE_AUTHOR("Gentio");
MODULE_DESCRIPTION("A dummy driver");

#+end_src

* how to compile a linux driver
There are three kinds of methods to compile a linux driver.
** change the kconfig and the makefile of the kernel
For expamle, you have a module source naming hello.c in drivers/misc, you can do it like:
Add the Kconfig and the makefile in the misc directory
For expamle, you have a module source naming hello.c in drivers/misc, you can do it like:
Add the Kconfig and the makefile in the misc directory.

** a indepent directory
In this directory, you have a hello.c. You add a makefile file like:
#+begin_src
obj-m := hello.o
module-objs := hello.o
#+end_src
and you type a command in this directory:
#+begin_src
make -C /you_kernel_build_directory M=`pwd` modules
#+end_src
For me, my kernel build directory is located /usr/src/linux-4.8.4/, so i do it:
#+begin_src
$ make -C /usr/src/linux-4.8.4/ M=`pwd` modules
#+end_src
After do it, you can see the hello.ko in your hello directory.
insmod with a root premmit, you can see a message from the terminal or dmesg.

** a more power makefile outside kernel build.
The kernel developer make a more efficient method to do a compile.(the code come from ldd 3)
#+begin_src
#if define the KERNELRELEASE, it is call from the build system.
ifneq ($(KERNELRELEASE),)
  obj-m := hello.o
# if no define that we call ourself.
else
  KERNELDIR ?= /lib/modules/$(shell uname -r)/build
  PWD := $(shell pwd)
default:
  $(MAKE) -C $(KERNELDIR) M=$(PWD) modules
endif
#+end_src
